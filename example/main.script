local reszip = require "liveupdate_reszip.reszip"

local ZIP_FILENAME = sys.get_config("liveupdate_reszip.filename", "resources.zip")

-- HTML5: use relative path to load the .zip from the game directory
-- Other platforms: load .zip from your remote server.
local ZIP_FILE_LOCATION = (html5 and ZIP_FILENAME) or ("http://localhost:8080/" .. ZIP_FILENAME)

local EXCLUDED_PROXY_URL = "/level2#collectionproxy"
local LEVEL1_PROXY_URL = "/level1#collectionproxy"

local function http_loading_progress_handler(self, loaded, total)
    msg.post("#loading_progress", "enable")

    local progress = string.format("%dKB / %dKB", loaded / 1024, total / 1024)
    label.set_text("#loading_progress", progress)
end

local function load_level2(self)
    local missing_resources = collectionproxy.missing_resources(EXCLUDED_PROXY_URL)
    if next(missing_resources) ~= nil then
        print("Resources are missing, downloading...")

        http.request(ZIP_FILE_LOCATION, "GET", function (self, id, response)
            print("HTTP request status", response.status)
            if (response.status == 200 or response.status == 304) and response.error == nil then
                local zip = response.response
                if html5 then
                    local file = assert(io.open("/data/resources.zip", "wb"))
                    file:write(zip)
                    file:close()

                    local mounts = liveupdate.get_mounts()
                    for _, mount in ipairs(mounts) do
                        if mount.name == "reszip" then
                            liveupdate.remove_mount(mount.name)
                        end
                    end
                    liveupdate.add_mount("reszip", "zip:/data/resources.zip", 10, function()
                        -- All resources are loaded, finally load the level:
                        print("Everything is OK, load the level 2!")
                        msg.post(EXCLUDED_PROXY_URL, hash("load"))
                    end)
                else
                    assert(false, "WTF")
                end
            else
                print("Error happened while downloading: " .. response.status)
            end
        end)

        -- TIP: You can pass the "missing_resources" table instead of "nil" to load only missing resources.
        -- reszip.request_and_load_zip(ZIP_FILE_LOCATION, nil, function(self, err)
        --     if not err then
        --         -- All resources are loaded, finally load the level:
        --         print("Everything is OK, load the level 2!")
        --         msg.post(EXCLUDED_PROXY_URL, hash("load"))

        --         -- Free the memory, if you are not going to use the `resources.zip` file later (i.e. you can )
        --         reszip.clear_cache()
        --     else
        --         -- Try again?...
        --         print("ERROR: " .. err)
        --     end
        -- end, http_loading_progress_handler)
    else
        -- All resources exist, so load the level:
        print("Resources are already loaded. Let's load the level 2!")
        msg.post(EXCLUDED_PROXY_URL, hash("load"))
    end
end

function init(self)
    msg.post(".", "acquire_input_focus")
    msg.post("@render:", "use_fixed_fit_projection", {near = -1, far = 1})

    msg.post(LEVEL1_PROXY_URL, "async_load")
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("proxy_loaded") then
        msg.post("#loading_title", "disable")
        msg.post("#loading_progress", "disable")

        msg.post(sender, "enable")
    end
end

function on_input(self, action_id, action)
    if action_id == hash("touch") and action.pressed then
        if self.level2_flag then
            return
        end
        self.level2_flag = true

        msg.post("#loading_title", "enable")
        msg.post(LEVEL1_PROXY_URL, "unload")

        load_level2(self)
    end
end

function on_reload(self)
end
