local reszip = require "liveupdate_reszip.reszip"

-- Paths to the resources files
local ZIP_FILENAME = sys.get_config("liveupdate_reszip.filename", "resources.zip")
-- HTML5: use relative path to load the .zip from the game directory
-- Other platforms: load .zip from your remote server.
local ZIP_FILE_LOCATION = (html5 and ZIP_FILENAME) or ("http://localhost:8080/" .. ZIP_FILENAME)

-- URL of the excluded proxy:
local EXCLUDED_PROXY_URL = "/level2#collectionproxy"

local LEVEL1_PROXY_URL = "/level1#collectionproxy"

local function finish_handler(self, err)
    if not err then
        -- All resources are loaded, finally load the level:
        print("Everything is OK, load level 2!")
        msg.post(EXCLUDED_PROXY_URL, hash("load"))
    else
        -- Try again?...
        print("ERROR: " .. err)
    end
end

local function http_loading_progress_handler(self, loaded, total)
    msg.post("#loading_progress", "enable")

    local progress = string.format("%dKB / %dKB", loaded / 1024, total / 1024)
    label.set_text("#loading_progress", progress)
end

local function load_level2(self)
    -- We check if resources are missing and also check the version of the currently
    -- mounted resources using the resource file name.
    --
    -- So the idea is to give a new name to the resources file when building the project, 
    -- so that reszip knows that this version of the game requires a completely different
    -- resources file (even if missing_resources function tells us that the resources
    -- are not missing).
    local missing_resources = collectionproxy.missing_resources(EXCLUDED_PROXY_URL)
    if not reszip.version_match(ZIP_FILENAME) or next(missing_resources) ~= nil then
        print("Some resources are missing or have different version, so download the resources archive...")
        assert(liveupdate, "`liveupdate` module is missing.")

        reszip.load_and_mount_zip(ZIP_FILE_LOCATION, {
            filename = ZIP_FILENAME,
            delete_old_file = true,
            on_finish = finish_handler, 
            on_progress = http_loading_progress_handler
        })
    else
        -- All resources exist, so load the level:
        print("Resources are already loaded. Let's load level 2!")
        msg.post(EXCLUDED_PROXY_URL, hash("load"))
    end
end

function init(self)
    msg.post(".", "acquire_input_focus")
    msg.post("@render:", "use_fixed_fit_projection", {near = -1, far = 1})

    msg.post(LEVEL1_PROXY_URL, "async_load")
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("proxy_loaded") then
        msg.post("#loading_title", "disable")
        msg.post("#loading_progress", "disable")

        msg.post(sender, "enable")
    end
end

function on_input(self, action_id, action)
    if action_id == hash("touch") and action.pressed then
        if self.level2_flag then
            return
        end
        self.level2_flag = true

        msg.post("#loading_title", "enable")
        msg.post(LEVEL1_PROXY_URL, "unload")

        load_level2(self)
    end
end

function on_reload(self)
end
